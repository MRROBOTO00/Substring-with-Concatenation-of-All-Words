class Solution(object):
    def findSubstring(self, s, words):
        # Edge case: empty string or words
        if not s or not words:
            return []
        
        word_len = len(words[0])
        num_words = len(words)
        total_len = word_len * num_words
        n = len(s)

        # Frequency map of words in 'words'
        word_count = {}
        for w in words:
            word_count[w] = word_count.get(w, 0) + 1

        result = []

        # We check for each possible alignment (0 to word_len-1)
        for i in range(word_len):
            left = i
            right = i
            seen = {}

            # Slide the window
            while right + word_len <= n:
                word = s[right:right + word_len]
                right += word_len

                if word in word_count:
                    seen[word] = seen.get(word, 0) + 1

                    # Too many occurrences â†’ move left boundary
                    while seen[word] > word_count[word]:
                        left_word = s[left:left + word_len]
                        seen[left_word] -= 1
                        left += word_len

                    # If valid concatenation found
                    if right - left == total_len:
                        result.append(left)
                else:
                    # Reset window if word not in 'words'
                    seen.clear()
                    left = right

        return result


# Example tests
if __name__ == "__main__":
    sol = Solution()
    print(sol.findSubstring("barfoothefoobarman", ["foo", "bar"]))       
    # Output: [0, 9]

    print(sol.findSubstring("wordgoodgoodgoodbestword", ["word", "good", "best", "word"]))  
    # Output: []

    print(sol.findSubstring("barfoofoobarthefoobarman", ["bar", "foo", "the"]))            
    # Output: [6, 9, 12]
