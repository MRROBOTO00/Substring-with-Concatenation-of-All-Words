class Solution(object):
    def findSubstring(self, s, words):
        if not s or not words:
            return []
        
        word_len = len(words[0])
        num_words = len(words)
        window_len = word_len * num_words
        word_count = {}

        # Frequency map of words
        for w in words:
            word_count[w] = word_count.get(w, 0) + 1

        res = []

        # Try every possible offset (to handle all alignments)
        for i in range(word_len):
            left = i
            right = i
            seen = {}

            while right + word_len <= len(s):
                word = s[right:right + word_len]
                right += word_len

                if word in word_count:
                    seen[word] = seen.get(word, 0) + 1

                    # If seen too many times, slide left boundary
                    while seen[word] > word_count[word]:
                        left_word = s[left:left + word_len]
                        seen[left_word] -= 1
                        left += word_len

                    # If window matches all words
                    if right - left == window_len:
                        res.append(left)
                else:
                    # Reset window
                    seen.clear()
                    left = right

        return res


# Example tests
if __name__ == "__main__":
    sol = Solution()
    print(sol.findSubstring("barfoothefoobarman", ["foo", "bar"]))       # [0, 9]
    print(sol.findSubstring("wordgoodgoodgoodbestword", ["word","good","best","word"]))  # []
    print(sol.findSubstring("barfoofoobarthefoobarman", ["bar","foo","the"]))            # [6, 9, 12]
